import React, {useState, useEffect, useLayoutEffect, useContext} from 'react';
import {ThemeContext} from '../../context';

const Counter = () => {
  //после монтировании происходит установка дефолтного значения count
  //после обновления возвращает нам последнее значение count
  const [count, setCount] = useState(0);
  //аргумент для useContext должен быть непосредственно сам объект контекста
  const theme = useContext(ThemeContext);

  //useEffect будет запущена после того, как рендер будет зафиксирован на экране
  //второй параметр - для оптимизации
  //эффект выполнится, только если значения этой переменной различны между рендерами
  //если передать несколько переменных, то эффект выполнится если значение хотя бы одной из них различно между рендерами
  //важно, чтобы в этом массиве были все переменные, которые используются внутри
  //иначе можно получить старое значение
  //если передать пустой массив, то реакт посчитает, что ничего не изменилось и эффект выполнится только после монтирования и перед размонтированием
  //это как условие в componentDidUpdate if (prevProps.id !== this.props.id)
  useEffect(() => {
    console.log('перерендер компонента (монтирование и(или) обновление), выполнение эффекта');
    document.title = `Вы кликнули ${count} раз(а)`;
    console.log(document.body.scrollHeight, 'useEffect');

    return () => {
      //эта функция необходима для сброса эффекта
      //т.к. эффект выполняется после каждого рендера, то и сброс выполняется так же
      //по сути от выполняется перед обновлением и на componentWillUnmount
      console.log('сброс эффекта');

      //если второй аргумент useEffect [], то при обновлении он не выполняется
      //а значит при размонтировании мы увидим старое значение переменной (то, которое было при монтировании)
      console.log(count, 'count');
    }
  });

  useLayoutEffect(() => {
    //запускается после всех изменений DOM, перед useEffect
    console.log(document.body.scrollHeight, 'useLayoutEffect');
  });

  return (
    <div>
      <p style={{color: theme.color}}>{`Вы кликнули ${count} раз(а)`}</p>
      <button onClick={() => setCount(count + 1)}>Клик!</button>
    </div>
  );
};

export default Counter;